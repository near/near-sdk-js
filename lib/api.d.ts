import { Bytes } from "./utils";
export declare function log(...params: any[]): void;
export declare function signerAccountId(): string;
export declare function signerAccountPk(): Bytes;
export declare function predecessorAccountId(): string;
export declare function blockIndex(): BigInt;
export declare function blockHeight(): BigInt;
export declare function blockTimestamp(): BigInt;
export declare function epochHeight(): BigInt;
export declare function attachedDeposit(): BigInt;
export declare function prepaidGas(): BigInt;
export declare function usedGas(): BigInt;
export declare function randomSeed(): Bytes;
export declare function sha256(value: Bytes): Bytes;
export declare function keccak256(value: Bytes): Bytes;
export declare function keccak512(value: Bytes): Bytes;
export declare function ripemd160(value: Bytes): Bytes;
export declare function ecrecover(hash: Bytes, sig: Bytes, v: number, malleabilityFlag: number): Bytes | null;
export declare function panic(msg?: string): never;
export declare function panicUtf8(msg: string): never;
export declare function logUtf8(msg: string): void;
export declare function logUtf16(msg: string): void;
export declare function storageRead(key: Bytes): Bytes | null;
export declare function storageHasKey(key: Bytes): boolean;
export declare function validatorStake(accountId: string): any;
export declare function validatorTotalStake(): BigInt;
export declare function altBn128G1Multiexp(value: Bytes): Bytes;
export declare function altBn128G1Sum(value: Bytes): Bytes;
export declare function altBn128PairingCheck(value: Bytes): boolean;
export declare function jsvmAccountId(): string;
export declare function jsvmJsContractName(): string;
export declare function jsvmMethodName(): string;
export declare function jsvmArgs(): Bytes;
export declare function jsvmStorageWrite(key: Bytes, value: Bytes): boolean;
export declare function jsvmStorageRead(key: Bytes): Bytes | null;
export declare function jsvmStorageRemove(key: Bytes): boolean;
export declare function jsvmStorageHasKey(key: Bytes): boolean;
export declare function jsvmCallRaw(contractName: string, method: string, args: any): Bytes | null;
export declare function jsvmCall(contractName: string, method: string, args: any): any | null;
export declare function storageGetEvicted(): Bytes;
export declare function jsvmValueReturn(value: Bytes): void;
export declare function currentAccountId(): string;
export declare function input(): Bytes;
export declare function storageUsage(): BigInt;
export declare function accountBalance(): BigInt;
export declare function accountLockedBalance(): BigInt;
export declare function valueReturn(value: Bytes): void;
export declare function promiseCreate(accountId: string, methodName: string, args: Bytes, amount: number | BigInt, gas: number | BigInt): BigInt;
export declare function promiseThen(promiseIndex: number | BigInt, accountId: string, methodName: string, args: Bytes, amount: number | BigInt, gas: number | BigInt): any;
export declare function promiseAnd(...promiseIndex: number[] | BigInt[]): BigInt;
export declare function promiseBatchCreate(accountId: string): BigInt;
export declare function promiseBatchThen(promiseIndex: number | BigInt, accountId: string): BigInt;
export declare function promiseBatchActionCreateAccount(promiseIndex: number | BigInt): void;
export declare function promiseBatchActionDeployContract(promiseIndex: number | BigInt, code: Bytes): void;
export declare function promiseBatchActionFunctionCall(promiseIndex: number | BigInt, methodName: string, args: Bytes, amount: number | BigInt, gas: number | BigInt): void;
export declare function promiseBatchActionTransfer(promiseIndex: number | BigInt, amount: number | BigInt): void;
export declare function promiseBatchActionStake(promiseIndex: number | BigInt, amount: number | BigInt, publicKey: Bytes): void;
export declare function promiseBatchActionAddKeyWithFullAccess(promiseIndex: number | BigInt, publicKey: Bytes, nonce: number | BigInt): void;
export declare function promiseBatchActionAddKeyWithFunctionCall(promiseIndex: number | BigInt, publicKey: Bytes, nonce: number | BigInt, allowance: number | BigInt, receiverId: string, methodNames: string): void;
export declare function promiseBatchActionDeleteKey(promiseIndex: number | BigInt, publicKey: Bytes): void;
export declare function promiseBatchActionDeleteAccount(promiseIndex: number | BigInt, beneficiaryId: string): void;
export declare function promiseResultsCount(): BigInt;
export declare enum PromiseResult {
    NotReady = 0,
    Successful = 1,
    Failed = 2
}
export declare function promiseResult(resultIdx: number | BigInt): Bytes | PromiseResult.NotReady | PromiseResult.Failed;
export declare function promiseReturn(promiseIdx: number | BigInt): void;
export declare function storageWrite(key: Bytes, value: Bytes): boolean;
export declare function storageRemove(key: Bytes): boolean;
export declare function storageByteCost(): BigInt;
