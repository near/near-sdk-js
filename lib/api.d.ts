import { Bytes, NearAmount, PromiseIndex } from "./utils";
export declare function log(...params: unknown[]): void;
export declare function signerAccountId(): Bytes;
export declare function signerAccountPk(): Bytes;
export declare function predecessorAccountId(): Bytes;
export declare function blockIndex(): bigint;
export declare function blockHeight(): bigint;
export declare function blockTimestamp(): bigint;
export declare function epochHeight(): bigint;
export declare function attachedDeposit(): bigint;
export declare function prepaidGas(): bigint;
export declare function usedGas(): bigint;
export declare function randomSeed(): Bytes;
export declare function sha256(value: Bytes): Bytes;
export declare function keccak256(value: Bytes): Bytes;
export declare function keccak512(value: Bytes): Bytes;
export declare function ripemd160(value: Bytes): Bytes;
export declare function ecrecover(hash: Bytes, sig: Bytes, v: number, malleabilityFlag: number): Bytes | null;
export declare function panicUtf8(msg: Bytes): never;
export declare function logUtf8(msg: Bytes): void;
export declare function logUtf16(msg: Bytes): void;
export declare function storageRead(key: Bytes): Bytes | null;
export declare function storageHasKey(key: Bytes): boolean;
export declare function validatorStake(accountId: Bytes): bigint;
export declare function validatorTotalStake(): bigint;
export declare function altBn128G1Multiexp(value: Bytes): Bytes;
export declare function altBn128G1Sum(value: Bytes): Bytes;
export declare function altBn128PairingCheck(value: Bytes): boolean;
export declare function storageGetEvicted(): Bytes;
export declare function currentAccountId(): Bytes;
export declare function input(): Bytes;
export declare function storageUsage(): bigint;
export declare function accountBalance(): bigint;
export declare function accountLockedBalance(): bigint;
export declare function valueReturn(value: Bytes): void;
export declare function promiseCreate(accountId: Bytes, methodName: Bytes, args: Bytes, amount: NearAmount, gas: NearAmount): bigint;
export declare function promiseThen(promiseIndex: PromiseIndex, accountId: Bytes, methodName: Bytes, args: Bytes, amount: NearAmount, gas: NearAmount): bigint;
export declare function promiseAnd(...promiseIndexes: PromiseIndex[]): bigint;
export declare function promiseBatchCreate(accountId: Bytes): bigint;
export declare function promiseBatchThen(promiseIndex: PromiseIndex, accountId: Bytes): bigint;
export declare function promiseBatchActionCreateAccount(promiseIndex: PromiseIndex): void;
export declare function promiseBatchActionDeployContract(promiseIndex: PromiseIndex, code: Bytes): void;
export declare function promiseBatchActionFunctionCall(promiseIndex: PromiseIndex, methodName: Bytes, args: Bytes, amount: NearAmount, gas: NearAmount): void;
export declare function promiseBatchActionTransfer(promiseIndex: PromiseIndex, amount: NearAmount): void;
export declare function promiseBatchActionStake(promiseIndex: PromiseIndex, amount: NearAmount, publicKey: Bytes): void;
export declare function promiseBatchActionAddKeyWithFullAccess(promiseIndex: PromiseIndex, publicKey: Bytes, nonce: number | bigint): void;
export declare function promiseBatchActionAddKeyWithFunctionCall(promiseIndex: PromiseIndex, publicKey: Bytes, nonce: number | bigint, allowance: NearAmount, receiverId: Bytes, methodNames: Bytes): void;
export declare function promiseBatchActionDeleteKey(promiseIndex: PromiseIndex, publicKey: Bytes): void;
export declare function promiseBatchActionDeleteAccount(promiseIndex: PromiseIndex, beneficiaryId: Bytes): void;
export declare function promiseBatchActionFunctionCallWeight(promiseIndex: PromiseIndex, methodName: Bytes, args: Bytes, amount: NearAmount, gas: NearAmount, weight: number | bigint): void;
export declare function promiseResultsCount(): bigint;
export declare function promiseResult(promiseIndex: PromiseIndex): Bytes;
export declare function promiseReturn(promiseIndex: PromiseIndex): void;
export declare function storageWrite(key: Bytes, value: Bytes): boolean;
export declare function storageRemove(key: Bytes): boolean;
export declare function storageByteCost(): bigint;
